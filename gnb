#!/bin/env python3

import sys
import os
import time
import random

import requests
import asyncio
import websockets
import json

import commands
from classes import Message as Message

def log(string):
    print('({:.4f}): '.format(time.time()) + string)

class GatewayConnection:
    def __init__(self, websocket):
        self.websocket = websocket
        self.send_queue = asyncio.Queue()
        self.recv_queue = asyncio.Queue()
        self.send_enable = True
        self.recv_enable = True
        self.heartbeat_enable = True
        self.heartbeat_period = None
        self.sequence = None

        self.send_task = None
        self.recv_task = None
        self.heartbeat_task = None

    async def setup(self):
        """
        Perform handshakes with the gateway and setup the coroutine tasks
        """
        # perform initial requests before we kick off the loop proper
        gate_pay = json.loads(await self.websocket.recv())
        if gate_pay['op'] == 10:
            self.heartbeat_period = gate_pay['d']['heartbeat_interval']
            log("Received Hello, heartbeat={} ms".format(self.heartbeat_period))
        else:
            log("Failed hello, exiting...")
            return False

        if not await self.identify(): return False

        # setup tasks
        self.send_task = asyncio.create_task(self._send())
        self.recv_task = asyncio.create_task(self._recv())
        self.heartbeat_task = asyncio.create_task(self._heartbeat())

        # we're good
        return True


    async def identify(self):
        intents = 1 << 9 # get server messages
        identify_payload = json.dumps({'op': 2, 'd': {'token': token, 'intents': intents, 'properties': {'$os': 'linux', '$browser': 'test', '$device': 'server'}}})

        log("Sending Identify...")
        await self.websocket.send(identify_payload)
        gate_pay = json.loads(await self.websocket.recv())

        if gate_pay['t'] == 'READY':
            log("Identify handshake complete")
        else:
            log("Failed handshake, exiting...")
            return False
        self.sequence = gate_pay['s']
        return True


    async def send(self, payload):
        await self.send_queue.put(json.dumps(payload))


    async def recv(self):
        return await self.recv_queue.get()


    async def _send(self):
        while self.send_enable:
            await self.websocket.send(await self.send_queue.get())


    async def _recv(self):
        while self.recv_enable:
            r = json.loads(await self.websocket.recv())
            await self.recv_queue.put(r)
            # implicitly handle updating the sequence
            if r['s'] is not None: self.sequence = r['s']


    async def _heartbeat(self):
        payload = {'op': 1, 'd': {}, 'd': self.sequence, 't': 'HEARTBEAT'}
        while self.heartbeat_enable:
            payload['d'] = self.sequence
            log("Sending heartbeat ({})".format(payload['d']))
            await self.send(payload)
            await asyncio.sleep(self.heartbeat_period/1000)


async def gateway_loop(uri):
    log("Connecting to gateway...")

    # https://websockets.readthedocs.io/en/stable/intro.html
    async with websockets.connect(uri) as websocket:
        log("Connected to gateway")
        connection = GatewayConnection(websocket)
        if not await connection.setup(): return False

        run = True
        log("Beginning main receive loop")
        while run:
            gate_pay = await connection.recv()
            if gate_pay['t'] == 'MESSAGE_CREATE':
                # let's get it via REST api
                data = gate_pay['d']
                content = data['content']
                if content.find('!') == 0:
                    msg = commands.parse(content)
                    if msg is not None:
                        # good: send it
                        guild_id = data['guild_id']
                        channel_id = data['channel_id']
                        message_id = data['id']
                        msg_payload = {'content': msg.content, 'message_reference': {'message_id': message_id, 'channel_id': channel_id, 'guild_id': guild_id}}
                        url = '{}/channels/{}/messages'.format(api_url, channel_id)
                        if msg.multipart:
                            # https://stackoverflow.com/questions/35939761/how-to-send-json-as-part-of-multipart-post-request
                            files = {
                                'payload_json': (None, json.dumps(msg_payload), 'application/json'),
                                'file': open(msg.file_path, 'rb'),
                            }
                            r = requests.post(url, headers=headers, files=files)
                            log("Sent Multipart message ({}: {}): file '{}'".format(url,
                                                                                    str(r.status_code), msg.file_path))
                        else:
                            r = requests.post(url, headers=headers, json=msg_payload)
                            log("Sent message ({}: {})".format(url, str(r.status_code)))
            elif gate_pay['op'] == 11:
                log("Received heartbeat ACK")
            elif gpay['op'] == 9:
                time = random.randint(1, 5)
                log("Received Invalid Session, waiting to re-identify")
                await asyncio.sleep(time)
                if not await connection.identify(): return False
    return True


if __name__ == "__main__":
    log("Begin execution")

    # load token
    token_path = './token'

    if len(sys.argv) > 2 and sys.argv[1] == '--token-path':
        token_path = sys.argv[2]

    if 'GNB_TOKEN_PATH' in os.environ:
        token_path = os.environ['GNB_TOKEN_PATH']

    log("Loading token at " + token_path)
    try:
        with open(token_path, 'r') as token_file:
            token = token_file.read().strip()
    except FileNotFoundError:
        log("Unable to find token file " + token_path + ", exiting...")
        exit(1)

    # let's make a random ass request to post a message
    headers = {'User-Agent': "Great Names Bot",'Authorization': 'Bot ' + token}
    channel_id = '805235577213026316'
    api_url = 'https://discord.com/api'

    # get gateway
    log("Requesting bot gateway...")
    r = requests.get('https://discord.com/api/gateway/bot', headers=headers)
    gateway_r = r.json()
    gateway_url = gateway_r['url'] + '/?v=8&encoding=json'
    log("Gateway received")

    asyncio.get_event_loop().run_until_complete(gateway_loop(gateway_url))
